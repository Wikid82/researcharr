name: CI â€” Build

on:
  push: {}
  pull_request: {}

jobs:
  build:
    # NOTE: corrected invalid runner label (typo) -> using 'ubuntu-latest'.
    # If you need a Debian-specific runner, set up a self-hosted runner and
    # update the workflow to use its label (e.g., 'self-hosted, debian-slim').
    runs-on: ubuntu-latest
    env:
      # Ensure the checked-out repository root is on PYTHONPATH so tests that
      # import top-level modules (e.g. `factory`) can find them when the
      # runner changes working directories or when pytest adjusts sys.path.
      PYTHONPATH: ${{ github.workspace }}
      # Expose Codecov token to job as an env var so step-level `if` can
      # check `env.CODECOV_TOKEN` without referencing `secrets` directly in
      # the expression (some editors flag `secrets.*` as an unrecognized
      # named-value even though GitHub Actions evaluates it at runtime).
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
    strategy:
      matrix:
        python-version: [3.13]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy pytest pytest-cov
          # Install the package in editable mode so imports like
          # `import researcharr.db` succeed during test collection. This
          # also ensures setuptools_scm can write a reproducible _version
          # module when tests or other steps import package metadata.
          pip install -e .
      - name: Run tests with pytest
        run: |
          pytest tests/ --maxfail=3 --disable-warnings -v \
            --cov=researcharr --cov-report=xml:coverage.xml
      # NOTE: `secrets.CODECOV_TOKEN` is evaluated by GitHub Actions at
      # runtime. Some local editors/language servers cannot resolve runtime
      # contexts and report 'Unrecognized named-value: secrets' as a false
      # positive. To reduce that editor noise we copy the secret into an
      # environment variable at the job level above and use `env.CODECOV_TOKEN`
      # in the step `if` expression instead of referencing `secrets.*`.
      - name: Upload coverage to Codecov
        if: ${{ env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ env.CODECOV_TOKEN }}
        continue-on-error: true
      - name: Build complete
        run: echo "build job finished"

  dev-image:
    if: ${{ github.ref_name != 'main' }}
    needs: build
    runs-on: ubuntu-latest
    env:
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build dev image (debug stage)
        run: |
          # Build the image using the Dockerfile's debug stage. We tag it locally
          # with a branch-specific name so maintainers can identify feature builds.
          BRANCH_TAG="${{ github.ref_name || github.sha }}"
          IMAGE_NAME="${{ github.repository }}:${BRANCH_TAG}-dev"
          docker build --target debug -t "$IMAGE_NAME" .
          # Save the image to a tarball for download by developers
          mkdir -p /tmp/image-artifacts
          docker save "$IMAGE_NAME" -o /tmp/image-artifacts/researcharr-dev-${BRANCH_TAG}.tar

      - name: Upload dev image artifact
        uses: actions/upload-artifact@v4
        with:
          name: researcharr-dev-image
          path: /tmp/image-artifacts/

      - name: Log in to GHCR (optional)
        if: ${{ env.GHCR_TOKEN != '' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Push dev image to GHCR (optional)
        if: ${{ env.GHCR_TOKEN != '' }}
        run: |
          BRANCH_TAG="${{ github.ref_name || github.sha }}"
          IMAGE_BASE="ghcr.io/${{ github.repository }}"
          docker build --target debug -t "${IMAGE_BASE}:${BRANCH_TAG}-dev" .
          docker push "${IMAGE_BASE}:${BRANCH_TAG}-dev"
