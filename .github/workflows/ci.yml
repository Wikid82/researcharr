name: CI

on:
  push: {}
  pull_request: {}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Initialize common runtime values with GitHub expressions so static
      # analyzers in editors can validate references. These are still
      # overwritten later by steps that compute canonical values and write
      # into $GITHUB_ENV, so runtime semantics are unchanged.
      REPO_NAME: "${{ github.repository }}"
      VERSION: "${{ github.ref_name }}"
      BUILD_NUMBER: "${{ github.run_number }}"
      GIT_SHA: "${{ github.sha }}"
      BUILD_DATE: "${{ github.run_id }}"
      SAFE_BRANCH: "${{ github.ref_name }}"
      BRANCH: "${{ github.ref_name }}"
      # Expose CODECOV_TOKEN from secrets at job level to reduce editor warnings
      CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
      # Use an explicit sqlite DATABASE_URL during CI so DB-backed tests run
      # against an isolated file in the workspace.
      DATABASE_URL: "sqlite:///${{ github.workspace }}/researcharr-test.db"
    strategy:
      matrix:
        python-version: [ 3.13 ]
    steps:
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy pytest pytest-cov
    - name: Lint with flake8
      run: |
        flake8 . --count --show-source --statistics
    - name: Check formatting with black
      run: |
        black --check .
    - name: Check import order with isort
      run: |
        isort --check-only .
    - name: Type check with mypy
      run: |
        mypy .
    - name: Run tests with pytest
      # Ensure we run pytest from the package directory so coverage files are generated where codecov expects
      working-directory: .
      env:
        # Ensure top-level modules (e.g. factory.py) are importable during
        # CI test collection by adding the repo root to PYTHONPATH.
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # Run tests and produce an XML coverage report for Codecov
        pytest tests/ \
          --maxfail=3 --disable-warnings -v \
          --cov=researcharr --cov-report=xml:coverage.xml
    - name: Show coverage file
      run: |
        echo "Coverage report files (in repo root):" && ls -l coverage.xml || true
        echo "Coverage report files (in researcharr/):" && ls -l researcharr/coverage.xml || true
    - name: Print coverage.xml head (debug)
      if: always()
      run: |
        echo "---- coverage.xml (first 80 lines) ----"
        head -n 80 coverage.xml || true
        echo "---- end coverage.xml head ----"
    - name: Upload coverage artifact for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-xml
        path: coverage.xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

  docker:
    needs: build
    runs-on: ubuntu-latest
    # Only build and push Docker images for pushes to protected branches
    # (development or main). Feature branches / short-lived branches such
    # as `chore` or `reception` will not trigger the Docker build here and
    # should be built locally by authors when needed.
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/development' || github.ref == 'refs/heads/main') }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Prepare image metadata
      id: meta
      run: |
        # Extract branch name from ref and create a sanitized, tag-safe variant
        BRANCH=${GITHUB_REF#refs/heads/}
        SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' | sed 's|/|-|g; s|[^a-z0-9._-]|-|g')
        REPO_NAME=${GITHUB_REPOSITORY,,}

        # If the current commit has an exact tag (preferred for releases) use it
        # otherwise fall back to a semantic pre-release version so CI builds
        # are discoverable (e.g. 0.0.0-alpha.<run-number>).
        RAW_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
        if [ -n "$RAW_TAG" ]; then
          VERSION=${RAW_TAG#v}
        else
          DESC=$(git describe --tags --dirty --always 2>/dev/null || true)
          if printf '%s' "$DESC" | grep -Eq '^[v]?[0-9]+\.[0-9]+\.[0-9]'; then
            VERSION=${DESC#v}
          else
            VERSION="0.0.0-alpha.${GITHUB_RUN_NUMBER}"
          fi
        fi

        BUILD_NUMBER=${GITHUB_RUN_NUMBER}
        GIT_SHA=${GITHUB_SHA::8}
        BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)

        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "git_sha=$GIT_SHA" >> $GITHUB_OUTPUT
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT

    - name: Build and push Docker image (all branches)
      run: echo "Preparing to build..."

    - name: Build and push Docker image (all branches)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        # Only push images to the registry for pushes to main, development, or tags.
        push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' || startsWith(github.ref, 'refs/tags/')) }}
        platforms: linux/amd64,linux/arm64
        tags: |
          ghcr.io/${{ steps.meta.outputs.repo_name }}:${{ steps.meta.outputs.version }}
          ghcr.io/${{ steps.meta.outputs.repo_name }}:${{ steps.meta.outputs.version }}-build${{ steps.meta.outputs.build_number }}
          ghcr.io/${{ steps.meta.outputs.repo_name }}:${{ steps.meta.outputs.git_sha }}
          ghcr.io/${{ steps.meta.outputs.repo_name }}:${{ steps.meta.outputs.safe_branch }}
          ghcr.io/${{ steps.meta.outputs.repo_name }}:branch-${{ steps.meta.outputs.safe_branch }}
        cache-from: type=gha,scope=researcharr-build-cache
        cache-to: type=gha,mode=max,scope=researcharr-build-cache
        build-args: |
          BUILD_VERSION=${{ steps.meta.outputs.version }}
          BUILD_NUMBER=${{ steps.meta.outputs.build_number }}
          GIT_SHA=${{ steps.meta.outputs.git_sha }}
          BUILD_DATE=${{ steps.meta.outputs.build_date }}
          PYTHON_VERSION=3.13
          RUNTIME_UID=1000
          RUNTIME_GID=1000

    - name: Build and push debug image (dev tag)
      id: build-debug
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        target: debug
        tags: |
          ghcr.io/${{ steps.meta.outputs.repo_name }}:${{ steps.meta.outputs.version }}-dev
          ghcr.io/${{ steps.meta.outputs.repo_name }}:dev
        cache-from: type=gha,scope=researcharr-build-cache
        cache-to: type=gha,mode=max,scope=researcharr-build-cache
        build-args: |
          BUILD_VERSION=${{ steps.meta.outputs.version }}
          BUILD_NUMBER=${{ steps.meta.outputs.build_number }}
          GIT_SHA=${{ steps.meta.outputs.git_sha }}
          BUILD_DATE=${{ steps.meta.outputs.build_date }}
          PYTHON_VERSION=3.13
          RUNTIME_UID=1000
          RUNTIME_GID=1000

    - name: Show pushed image digest and tags
      run: |
        echo "Pushed image digest: ${{ steps.build.outputs.digest }}"
        echo "Pushed image tags:"
        echo "  - ghcr.io/${{ steps.meta.outputs.repo_name }}:${{ steps.meta.outputs.version }}"
        echo "  - ghcr.io/${{ steps.meta.outputs.repo_name }}:${{ steps.meta.outputs.version }}-build${{ steps.meta.outputs.build_number }}"
        echo "  - ghcr.io/${{ steps.meta.outputs.repo_name }}:${{ steps.meta.outputs.git_sha }}"
        echo "  - ghcr.io/${{ steps.meta.outputs.repo_name }}:${{ steps.meta.outputs.safe_branch }}"
        echo "  - ghcr.io/${{ steps.meta.outputs.repo_name }}:branch-${{ steps.meta.outputs.safe_branch }}"
    - name: Additional tags for main/development
      if: ${{ steps.meta.outputs.branch == 'main' || steps.meta.outputs.branch == 'development' }}
      run: |
        REPO=ghcr.io/${{ steps.meta.outputs.repo_name }}
        BRANCH=${{ steps.meta.outputs.branch }}
        # Use the pushed image identified by GIT_SHA as the source for extra tags
        SRC_TAG=${{ steps.meta.outputs.git_sha }}
        if [ "$BRANCH" = "main" ]; then
          # Tag the image pushed from main as 'latest'
          docker pull $REPO:${SRC_TAG} || true
          docker tag $REPO:${SRC_TAG} $REPO:latest
          docker push $REPO:latest
        fi
        if [ "$BRANCH" = "development" ]; then
          # Tag the image pushed from development with a dev-<build> tag
          docker pull $REPO:${SRC_TAG} || true
          docker tag $REPO:${SRC_TAG} $REPO:dev-${{ steps.meta.outputs.build_number }}
          docker push $REPO:dev-${{ steps.meta.outputs.build_number }}
        fi

  docs-linkcheck:
    # Run for pull requests, and for pushes to main/development (so docs previews and main site are checked)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')) }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Detect docs changes
      id: docs_changed
      run: |
        set -euo pipefail
        echo "Event: $GITHUB_EVENT_NAME"
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE=${{ github.event.pull_request.base.ref }}
          echo "Comparing against base branch: $BASE"
          git fetch origin "$BASE"
          DIFF=$(git diff --name-only origin/$BASE...HEAD || true)
        else
          # For push events compare the previous commit (github.event.before) to HEAD
          BEFORE=${{ github.event.before }}
          echo "Comparing commits: $BEFORE..HEAD"
          DIFF=$(git diff --name-only $BEFORE...HEAD || true)
        fi
        CHANGED=$(echo "$DIFF" | grep -E '^docs/' || true)
        if [ -z "$CHANGED" ]; then
          echo "docs_changed=false" >> $GITHUB_OUTPUT
          echo "No docs changes detected, skipping linkcheck."
        else
          echo "docs_changed=true" >> $GITHUB_OUTPUT
          echo "Docs changed:\n$CHANGED"
        fi
    - name: Setup Ruby (for html-proofer)
      if: steps.docs_changed.outputs.docs_changed == 'true'
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
    - name: Install html-proofer
      if: steps.docs_changed.outputs.docs_changed == 'true'
      run: |
        gem install html-proofer
    - name: Build site with Jekyll
      if: steps.docs_changed.outputs.docs_changed == 'true'
      run: |
        # Build a rendered site from the docs/ source so Liquid templates are resolved
        # Install jekyll locally for the job and build into the 'site' directory.
        gem install jekyll bundler
        jekyll build --source docs --destination site || {
          echo "Jekyll build failed; falling back to copying raw docs to site/";
          mkdir -p site;
          cp -a docs/. site/;
        }
    - name: Run html-proofer link check
      if: steps.docs_changed.outputs.docs_changed == 'true'
      run: |
        # html-proofer uses OptionParser booleans; passing --check-external-hash=false
        # is treated as an argument to the flag and causes an error. Use the
        # explicit no-flag or omit the flag entirely to disable the check.
        #
        # Use --no-check-external-hash to explicitly disable the check (preferred),
        # and keep --allow-hash-href as before.
        htmlproofer site --no-check-external-hash --allow-hash-href

  trivy-scan:
    # Scan built image for vulnerabilities; run on PRs and pushes so contributors get feedback
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container

    - name: Build image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        push: false
        tags: researcharr-ci:${{ github.run_id }}
        build-args: |
          PYTHON_VERSION=3.13

    - name: Run Trivy scan (JSON)
      run: |
        echo "Running Trivy against image researcharr-ci:${{ github.run_id }}"
        # Pull latest trivy image and scan the local image. Produce JSON output.
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v ${{ github.workspace }}:/workspace aquasec/trivy:latest image --format json -o /workspace/trivy-report.json researcharr-ci:${{ github.run_id }} || true
        # Exit non-zero only if HIGH or CRITICAL vulnerabilities are found
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL researcharr-ci:${{ github.run_id }}

    - name: Upload Trivy report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report-${{ github.run_id }}
        path: trivy-report.json
