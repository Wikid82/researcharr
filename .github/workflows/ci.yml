name: CI

on:
  push: {}
  pull_request: {}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.13 ]
    steps:
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy pytest pytest-cov
    - name: Lint with flake8
      run: |
        flake8 . --count --show-source --statistics
    - name: Check formatting with black
      run: |
        black --check .
    - name: Check import order with isort
      run: |
        isort --check-only .
    - name: Type check with mypy
      run: |
        mypy .
    - name: Run tests with pytest
      run: |
        # Run tests and produce an XML coverage report for Codecov
        pytest tests/ \
          --maxfail=3 --disable-warnings -v \
          --cov=researcharr --cov-report=xml:coverage.xml
    - name: Show coverage file
      run: |
        echo "Coverage report files:" && ls -l coverage.xml || true
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Determine branch name
      run: echo "BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
    - name: Set lowercase repository name
      run: echo "REPO_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
    - name: Build and push Docker image (all branches)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ env.REPO_NAME }}:${{ env.BRANCH }}
          ghcr.io/${{ env.REPO_NAME }}:branch-${{ env.BRANCH }}
        cache-from: type=gha,scope=researcharr-build-cache
        cache-to: type=gha,mode=max,scope=researcharr-build-cache
        build-args: |
          PYTHON_VERSION=3.13
    - name: Additional tags for main/development
      if: ${{ env.BRANCH == 'main' || env.BRANCH == 'development' }}
      run: |
        REPO=ghcr.io/${{ env.REPO_NAME }}
        BRANCH=${{ env.BRANCH }}
        if [ "$BRANCH" = "main" ]; then
          # Ensure the image exists locally (pull from registry if necessary), then tag and push latest
          docker pull $REPO:main || true
          docker tag $REPO:main $REPO:latest
          docker push $REPO:latest
        fi
        if [ "$BRANCH" = "development" ]; then
          # Ensure the image exists locally (pull from registry if necessary) then push the development tag
          docker pull $REPO:development || true
          docker push $REPO:development
        fi

  docs-linkcheck:
    # Run only for pull requests and only when docs/ changed
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Detect docs changes
      id: docs_changed
      run: |
        set -euo pipefail
        BASE=${{ github.event.pull_request.base.ref }}
        git fetch origin "$BASE"
        CHANGED=$(git diff --name-only origin/$BASE...HEAD | grep -E '^docs/' || true)
        if [ -z "$CHANGED" ]; then
          echo "docs_changed=false" >> $GITHUB_OUTPUT
          echo "No docs changes detected, skipping linkcheck."
        else
          echo "docs_changed=true" >> $GITHUB_OUTPUT
        fi
    - name: Setup Ruby (for html-proofer)
      if: steps.docs_changed.outputs.docs_changed == 'true'
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
    - name: Install html-proofer
      if: steps.docs_changed.outputs.docs_changed == 'true'
      run: |
        gem install html-proofer
    - name: Build site (no-op for raw markdown)
      if: steps.docs_changed.outputs.docs_changed == 'true'
      run: |
        mkdir -p site
        cp -a docs/. site/
    - name: Run html-proofer link check
      if: steps.docs_changed.outputs.docs_changed == 'true'
      run: |
        htmlproofer site --check-external-hash=false --allow-hash-href
