services:
  researcharr:
    # Use the developer image (includes shell & dev tooling). The alpine
    # variant is deprecated for development; use the `dev` tag for local
    # interactive runs.
    image: "ghcr.io/wikid82/researcharr:dev"
    container_name: researcharr-dev
    # Map the app ports so you can browse the UI from the host
    ports:
      - "2929:2929"
      - "5678:5678" # optional debug port for debugpy
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=development
      - LOGLEVEL=DEBUG
      - WEBUI_PORT=2929
      - TZ=America/New_York
      # Useful runtime debugging overrides
      - RUN_JOB_CONCURRENCY=1
      - JOB_TIMEOUT=0
      # Development debug flags (set to 'true' to enable)
      - WEBUI_DEV_DEBUG=true
      - WEBUI_DEV_ENABLE_DEBUG_ENDPOINT=true
    volumes:
      # Mount the project source into the container for live edits & immediate debugging
      - ${HOST_APP_PATH:-./}:/app:delegated
      # Persist runtime config and DB on host so you can inspect files easily
      - ${HOST_CONFIG_PATH:-./config}:/config:rw
      - ${HOST_LOGS_PATH:-./logs}:/config/logs:rw
    tty: true
    stdin_open: true
    # Use the repository-local entrypoint (mounted into /app) so local
    # edits to `entrypoint.sh` are used during development without rebuilding
    # the published image. This is a development convenience only.
    entrypoint: ["/app/entrypoint.sh"]
    # Run the entrypoint as root in dev so it can perform chown/chmod on bind mounts,
    # then the entrypoint will drop privileges into the configured PUID/PGID.
    # Use a simple, array-form command to avoid complex quoting and inline
    # shell comments which can produce unexpected syntax errors.
    command:
      - "/bin/sh"
      - "-lc"
      - "pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt || true && python -m debugpy --listen 0.0.0.0:5678 --wait-for-client /app/scripts/researcharr.py serve"
    # If you want to run under debugpy, replace the command above with:
    # command:
    #   - "/bin/sh"
    #   - "-lc"
    #   - "pip install --no-cache-dir -r requirements.txt debugpy || true && python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m runpy /app/scripts/researcharr.py serve"
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

# Usage tips:
# - Start in the foreground to stream logs: docker compose -f docker-compose.dev.yml up --build
# - Follow logs from another terminal: docker compose -f docker-compose.dev.yml logs -f researcharr
# - Inspect cron logs: tail -f logs/cron.log (on the host) or docker exec -it researcharr-dev tail -f /config/cron.log
# - For remote debugging: install debugpy in the container and uncomment the debugpy line above; attach your IDE to port 5678
